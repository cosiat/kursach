Введение
1. Предпосылки
	1.1 Почему игра?
	1.2 Почему OpenGL?
	1.3 Почему спутник?
2. Проектирование
	2.1 Концепция игры
	2.2 Математическая модель мира
	2.3 Реализация модели


ПРОЕКТ ИГРОВОГО ПРИЛОЖЕНИЯ "СПУТНИК"

Аннотация
Проектирование многоплатформенного игрового приложения с использованием графических библиотек, реализующих спецификацию OpenGL 3.3, построение математической модели игрового мира и ее реализация в виде графического приложения для операционных систем на базе Linux.

Анатацыя
Праектаваньне шматплатформеннай гульнявой карыстальніцкай праграмы з выкарыстаньнем графічных бібліятэк, якія реалізоўваюць спецыфікацыю OpenGL 3.3, пабудова матэматычнай мадэлі гульнявога сьвету і яе реалізацыя ў выглядзе графічнай карыстальніцкай праграмы для аперацыйных сістэм на базе Linux.

Annotation
Designing a multi-platform game application using graphics libraries implementing OpenGL 3.3 specification, developing a mathematical model of the game world and implementing it in form of a graphic application for Linux-based operating systems.

Реферат
Курсовой проект
Ключевые слова: ИГРОВОЕ ПРИЛОЖЕНИЕ, OPENGL, LINUX, СПУТНИК
Объект исследования: спецификация OpenGL 3.3 и ее реализации для операционных систем на базе Linux, упрощенная компьютерная графическая симуляция кеплеровского движения в двух измерениях.
Цель работы: разработать концепцию игрового приложения, построить математическую модель игрового мира и реализовать ее в виде графического приложения.
Методы исследования: анализ физической модели движения небесных тел, программирование численных методов решения уравнений движения на языке С++ и визуализация решения с помощью графических библиотек.
Результатом является готовый проект игрового приложения и графическое приложение для операционных систем на базе Linux.
Областью применения является игровая индустрия.

Оглавление

Введение
Тема моего курсового проекта - проектирование игрового приложения - многим может показаться по меньшей мере не представляющей научного интереса, причем, как c концептуальной точки зрения, так и с точки зрения реализации, а некоторым - даже откровенно несерьезной. Но это распространенное мнение, касающееся видеоигр и игровой индустрии и особенно свойственное более старшему поколению, при более глубоком и разностороннем рассмотрении темы обнаруживает свою полную необоснованность и даже ошибочность! Именно это я постараюсь показать в следующих главах, кратко рассмотрев теоретические и - более детально - практические аспекты разработки игрового приложения на примере простой игры "запусти спутник в космос" - начиная с ответа на вопросы "почему, чем и кому это интересно" и разработки концепции игры и заканчивая программированием методов численного решения дифференциальных уравнений, задающих траектории движения объектов на экране, и последующим анимированием этих объектов с учетом полученных траекторий при помощи графических библиотек.

Предпосылки

В этой главе я объясню, почему я выбрал именно эту тему, в чем ее актуальность, какие у нее перспективы и в чем ее привлекательность для меня лично и для всего человечества в целом. Также я прокомментирую свой выбор инструментов и технологий для реализации своего проекта, кратко опишу их преимущества и недостатки и укажу на ключевые факторы, по которым я принял решение об их использовании. Я сделаю это в форме ответов на вопросы "почему", каждый из которых будет затрагивать отдельный аспект создания проекта игры, начиная с общетеоретических и заканчивая конкретно практическими. В разделе "Почему игра" я в общих чертах расскажу, чем видеоигры интересны людям и что заставляет в них играть не только детей и молодежь, но и представители всех других поколений, в том числе не знакомых с компьютерами с детства, а также чем тема разработки игр и игровая индустрия интересна лично мне и как я представляю себе ее развитие. В разделе "Почему OpenGL?" я кратко опишу эту спецификацию, расскажу, для чего она используется и в чем ее преимущества над аналогичными технологиями других производителей, в частности, над ее прямым конкурентом Direct3D от Microsoft. И в заключение в разделе "Почему спутник?", я сформулирую концепцию своей игры в одном предложении, определю ее жанр и целевую аудиторию и объясню, в чем, на мой взгляд, ее привлекательность для этой аудитории и каковы ее конкурентные преимущества перед другими представителями жанра.

Почему игра?
Многие люди придерживаются мнения, что видеоигры не приносят никакой пользы, не развивают никаких навыков, вредят здоровью и в целом являются пустой тратой времени и недостойным занятием и недоумевают, почему детей и молодежь, а иногда и солидных состоявшихся людей, часто занимающих руководящие должности с большим уровнем ответственности или занимающихся научной деятельностью, так танет проводить по нескольку часов в день за экраном монитора или телевизора.  Можно было бы сразу начать опровержение этого достаточно распространенного убеждения с предоставления результатов многочисленных научных исследований, согласно которым такие умения, как четкое последовательное выполнение инструкций, навыки решения логических задач, физическая координация и моторика, пространственное мышление, планирование, распределение ресурсов и многозадачность - лишь некоторые из способностей, которые способны развить видеоигры и которые они в отдельных случаях развивают лучше, чем какие бы то ни было специализированные тренинги. Но это все равно не даст ответа на главный вопрос - почему люди играют? На этот вопрос может дать ответ другое исследование из области психологии, результаты которого описаны в книге "Glued to Games: How Videogames Draw Us In and Hold Us Spellbound" автора Scott Rigby. Автор объясняет: "У всех нас есть свои базовые психологические потребности. Эти потребности действуют все время - когда мы на работе, или когда мы принимаем участие в лиге по софтболу, или когда играем в видеоигры по выходным. Эти потребности действительны в каждый момент времени. Видеоигры идеально удовлетворяют некоторые из этих потребностей." Согласно Rigby, сложную модель системы человеческих потребностей и их удовлетворения можно свести к трем основным категориям. Первая обобщенная потребность - это потребность в компетентности, выражающаяся в желании чувствовать контроль над ситуацией. Людям нравится чувствовать себя успешными, ощущать прогресс в своем развитии и рост своих знаний и умений. Но в то время, как в жизни прогресс и развитие во многих видах деятельности могут быть слабо ощутимы или тяжело достижимы и приносить недостаточную психологическую удовлетворенность, игры вознаграждают человека за успех мгновенно и гарантированно и однозначно определяют необходимые для дальнейшего развития последовательности действий. Вторая потребность - это потребность в автономии. Она выражается в желании чувствовать свою независимость и иметь контроль над своими собственными действиями. Из-за этой потребности лишение свободы является для нас наказанием, а манипулирование или силовое принуждение вызывает у нас сильное внутреннее неприятие. Существование этой потребности является одной из причин популярности игр с открытым миром и большими игровыми возможностями. И, наконец, третья потребность - общественность. Нам хочется ощущать свою значимость для других и важность своего вклада в общество. Тут, конечно же, первыми приходят на ум многопользовательские игры, однако исследования показали, что наша потребность в общественности удовлетворяется и при взаимодействии игрока с неигровыми персонажами (NPC, Non-player characters), которые часто дают игроку задания или нуждаются в его помощи по сюжету игры. Таким образом, видеоигры являются одним из лучших средств для удовлетворение своих фундаментальных психологических потребностей, а значит, для поддержания своего духовного и физического здоровья. Кроме того они просто поднимают настроение и помогают отвлечься от повседневной рутины и сменить обстановку, не требуя для этого больших физических и умственных усилий (хотя это зависит от игры) или большого количества времени или финансовых ресурсов.
Все вышесказанное является причиной привлекательности видеоигр для человечества в целом и для меня, как его гордого представителя, в частности. Все эти свойства видеоигр заставляют меня верить в то, что индустрия игр хоть и будет претерпевать многочисленные изменения, подстраиваясь под требования аудитории и осваивая новые аппаратные платформы, но будет существовать ровно столько, сколько будет существовать технологически развитое человечество, способное использовать движение электронов в проводниках в практических целях и порождать светлые умы с живой фантазией, готовые отдать свое сердце и душу созданию глупых стрелялок с монстрами и взрывами. Моя вера также подкрепляется статистическими данными о развитии мировой игровой индустрии (рисунок). В 2015 году суммарный доход мировых компаний-разработчиков составила 91.5 миллиарда долларов США (на графике показан прогноз на 2015 год), что на 9% больше, чем в 2014-м. На графике показана динамика развития доходов игровой индустрии и прогноз на 2016-2018 года. Из этих данных видно, что индустрия стабильно и быстро развивается, а значит, в ней есть место новым работникам и новым идеям, что также является немаловажной причиной моей заинтересованности в ней.
Подводя итог, объединю все сказанное выше в один краткий ответ на вопрос "Почему игра?": потому что это интересно, это перспективно, это полезно и это нужно.

Почему OpenGL?
Рассмотрев философскую сторону темы, перейду к практике и опишу основные инструменты, которые будут мной использованы при разработке игрового приложения и особенности которых мной будут учтены при его проектировании, а именно спецификацию OpenGL версии 3.3, кроссплатформенную открытую реализацию этой спецификации Mesa версии 10.0, а также дополнительные библиотеки GLU и GLUT, расширяющие и дополняющие возможности этой реализации. Начну с общих сведений об этих технологиях, их уникальных характеристиках и областях их применения.

OpenGL (Open Graphics Library) — это спецификация, определяющая независимый от языка программирования платформонезависимый программный интерфейс для написания приложений, использующих двумерную и трёхмерную компьютерную графику. Она включает более 300 функций для рисования сложных трёхмерных сцен из простых примитивов и используется при создании компьютерных игр, САПР, виртуальной реальности, визуализации в научных исследованиях. На базовом уровне, OpenGL — это просто спецификация, то есть документ, описывающий набор функций и их точное поведение. Производители оборудования на основе этой спецификации создают реализации — библиотеки функций, соответствующих набору функций спецификации. Реализация призвана эффективно использовать возможности оборудования. Если аппаратура не позволяет реализовать какую-либо возможность, она должна быть эмулирована программно. Производители должны пройти специфические тесты (conformance tests — тесты на соответствие) прежде чем реализация будет классифицирована как OpenGL-реализация. Таким образом, разработчикам программного обеспечения достаточно научиться использовать функции, описанные в спецификации, оставив эффективную реализацию последних разработчикам аппаратного обеспечения. В итоге, OpenGL ориентируется на следующие две задачи:

Скрыть сложности адаптации различных 3D-ускорителей, предоставляя разработчику единый API.
Скрыть различия в возможностях аппаратных платформ, требуя реализации недостающей функциональности с помощью программной эмуляции.

 Эффективные реализации OpenGL существуют для Windows, Unix-платформ, PlayStation 3 и Mac OS. Эти реализации обычно предоставляются изготовителями видеоадаптеров и активно используют возможности последних. Существуют также открытые реализации спецификации OpenGL, одной из которых является библиотека Mesa. Официально она не сертифицирована, но на практике вполне соответствует стандарту OpenGL. Mesa ориентирована на обеспечение высокой производительности, в том числе за счёт использования аппаратного ускорения работы с графикой, поддерживаемого видеоадаптерами. Mesa3D лежит в основе графической подсистемы операционных систем с открытым исходным кодом, так что её обновление имеет большое значение для всех пользователей, не имеющих возможности или не желающих использовать закрытые драйверы и библиотеки OpenGL от производителей оборудования. В данный момент Mesa является одной из самых популярных реализаций OpenGL для Unix-подобных ОС.

Помимо основных библиотек, которые реализовывают непосредственно спецификацию OpenGL, cуществует ряд библиотек, созданных поверх или в дополнение к ней. Например, библиотека GLU (OpenGL Utility Library), являющаяся практически стандартным дополнением OpenGL и всегда её сопровождающая, построена поверх последней, то есть использует её функции для реализации своих возможностей. В числе этих возможностей: переключение между экранными и мировыми координатами, создание текстур, рисование квадратичных поверхностей, составление мозаики прямоугольных примитивов, интерпретация кодов ошибок OpenGL, расширенный набор функций трансформации для установки точек обзора и более простого управления камерой и др. Также содержит функции для рисования дополнительных графических примитивов, таких как сфера, цилиндр, конус, диск и др.

Другие библиотеки, как, например, GLUT и SDL, созданы для реализации возможностей, недоступных в OpenGL. К таким возможностям относятся создание интерфейса пользователя (окна, кнопки, меню и др.), настройка контекста рисования (область рисования, использующаяся OpenGL), обработка сообщений от устройств ввода-вывода (клавиатура, мышь и др.), а также работа с файлами. Обычно, каждый оконный менеджер имеет собственную библиотеку-расширение для реализации вышеописанных возможностей, например, WGL в Windows или GLX в X Window System, однако библиотеки GLUT и SDL являются кросс-платформенными, что облегчает перенос написанных приложений на другие платформы. 

OpenGL Utility Toolkit (GLUT) — библиотека утилит для приложений под OpenGL, которая в основном отвечает за системный уровень операций ввода-вывода при работе с операционной системой. Из функций можно привести следующие: создание окна, управление окном, мониторинг за вводом с клавиатуры и событий мыши. Она также включает функции для рисования ряда геометрических примитивов: куб, сфера, чайник. GLUT даже включает возможность создания несложных всплывающих меню.

Использование библиотеки GLUT преследует две цели. Во-первых, это создание кроссплатформенного кода. Во-вторых, GLUT позволяет облегчить изучение OpenGL. Чтобы начать программировать под OpenGL, используя GLUT, требуется всего страница кода. Написание аналогичных вещей на API требует несколько страниц, написанных со знанием API управления окнами операционной системы.


